{"version":3,"sources":["components/Header.js","components/Form.js","components/Song.js","components/Band.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","Form","setSearch","useState","band","song","bandInfo","setBandInfo","setError","handleOnChange","event","target","name","value","onSubmit","preventDefault","trim","id","type","onChange","required","htmlFor","data-error","Song","data1","error","lyrics","Band","data2","artists","Object","keys","length","strArtist","strBiographyEN","strGenre","strArtistThumb","strWebsite","strTwitter","strFacebook","src","alt","App","search","setData1","setData2","URL","URL2","useEffect","a","Promise","all","fetch","response","json","result1","result2","dataFromApi","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3d1fc475.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper cyan darken-3\">\r\n        <a href=\"#!\" className=\"brand-logo center\">\r\n          Lyrics search\r\n        </a>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Form = ({ setSearch }) => {\r\n  const [bandInfo, setBandInfo] = useState({ band: \"\", song: \"\" });\r\n  const [error, setError] = useState(false);\r\n  const { band, song } = bandInfo;\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (band.trim() === \"\" || song.trim() === \"\") {\r\n      setError(true);\r\n      return;\r\n    }\r\n    setError(false);\r\n    setSearch(bandInfo);\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setBandInfo({\r\n      ...bandInfo,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"row container\">\r\n      <div className=\"col s12\">\r\n        <form onSubmit={handleSubmit} className=\"row\">\r\n          <div className=\"input-field col s12 m6\">\r\n            <input\r\n              id=\"bandid\"\r\n              type=\"text\"\r\n              className=\"validate\"\r\n              name=\"band\"\r\n              onChange={handleOnChange}\r\n              required\r\n              value={band}\r\n            />\r\n            <label htmlFor=\"bandid\">Band´s Name</label>\r\n            <span\r\n              className=\"helper-text\"\r\n              data-error=\"Enter name of the band \"\r\n            ></span>\r\n          </div>\r\n          <div className=\"input-field col s12 m6\">\r\n            <input\r\n              id=\"songid\"\r\n              type=\"text\"\r\n              className=\"validate\"\r\n              name=\"song\"\r\n              onChange={handleOnChange}\r\n              required\r\n              value={song}\r\n            />\r\n            <label htmlFor=\"songid\">Song´s name</label>\r\n            <span\r\n              className=\"helper-text\"\r\n              data-error=\"Enter the song to search\"\r\n            ></span>\r\n          </div>\r\n          <button\r\n            className=\"btn waves-effect waves-light col s12 m2 right\"\r\n            type=\"submit\"\r\n            name=\"action\"\r\n          >\r\n            Submit\r\n            <i className=\"material-icons right\">send</i>\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Song = ({ ...data1 }) => {\r\n  if (data1.error)\r\n    return <p className=\"flow-text letra lyrics\"> {data1.error}</p>;\r\n  return (\r\n    <div className=\"center  \">\r\n      <h3 className=\"title_song\">{data1.song}</h3>\r\n      <p className=\"flow-text letra lyrics\">{data1.lyrics}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Song;\r\n","import React from \"react\";\r\n\r\nconst Band = ({ ...data2 }) => {\r\n  if (data2.artists === null)\r\n    return <p className=\"flow-text letra lyrics\">Artist Not Found</p>;\r\n  if (Object.keys(data2).length === 0) return null;\r\n  const {\r\n    strArtist,\r\n    strBiographyEN,\r\n    strGenre,\r\n    strWebsite,\r\n    strTwitter,\r\n    strArtistThumb,\r\n    strFacebook,\r\n  } = data2.artists[0];\r\n\r\n  return (\r\n    <div className=\"row song\">\r\n      <h3 className=\"center\">{strArtist}</h3>\r\n      <div className=\"col\">\r\n        <img className=\"responsive-img\" src={strArtistThumb} alt={strArtist} />\r\n      </div>\r\n      <div className=\"col s12\">\r\n        <p>Gender: {strGenre}</p>\r\n      </div>\r\n      <div className=\"row \">\r\n        <h5 className=\"col s12 biography_title\">Biography</h5>\r\n        <p className=\"biography_content\">{strBiographyEN}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Band;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Form from \"./components/Form\";\nimport Song from \"./components/Song\";\nimport Band from \"./components/Band\";\n\nfunction App() {\n  const [search, setSearch] = useState({});\n  const [data1, setData1] = useState();\n  const [data2, setData2] = useState();\n  const URL = `https://api.lyrics.ovh/v1/${search.band}/${search.song}`;\n  const URL2 = `https://www.theaudiodb.com/api/v1/json/1/search.php?s=${search.band}`;\n\n  useEffect(() => {\n    const dataFromApi = async () => {\n      if (Object.keys(search).length === 0) return;\n      const response = await Promise.all([fetch(URL), fetch(URL2)]);\n      const result1 = await response[0].json();\n      const result2 = await response[1].json();\n      setData1(result1);\n      setData2(result2);\n    };\n    dataFromApi();\n  }, [URL, URL2, search]);\n\n  return (\n    <>\n      <Header />\n      <Form setSearch={setSearch} />\n      <div className=\"row container\">\n        <div className=\"col s12 m6\">\n          <Band {...data2} />\n        </div>\n        <div className=\"col s12 m6\">\n          <Song {...data1} song={search.song} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}